#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
螺旋素数
从1开始逆时针螺旋着摆放自然数，我们可以构造出一个边长为7的螺旋数阵。

37 36 35 34 33 32 31
38 17 16 15 14 13 30
39 18  5  4  3 12 29
40 19  6  1  2 11 28
41 20  7  8  9 10 27
42 21 22 23 24 25 26
43 44 45 46 47 48 49

可以发现，所有的奇数平方都在这个螺旋方针的右下对角线上，更有趣的是，在所有对角线上一共有8个素数，比例达到8/13 ≈ 62%。
在这个方阵外面完整地再加上一层，就能构造出一个边长为9的螺旋方阵。
如果不断重复这个过程，当对角线上素数的比例第一次低于10%时，螺旋数阵的边长是多少？

分析：
和之前的阵列题一样，构造4个角，右下角的一定是最大的
因为数字不太多，所以就直接用短除法了
四个角的公式为：
(n*2+1)^2
(n*2+1)^2 - 1*n*2
(n*2+1)^2 - 2*n*2
(n*2+1)^2 - 3*n*2
"""
def is_prime2(n):  # 短除法，验证列表内的数字是否是质数
    if int(n ** 0.5) ** 2 != n and n != 1 and n != 0:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

def xxx():
    # 层数是从0开始的，边长是从1开始，每一层边长叠加+2
    floor = 0
    count_prime = 0  # 质数统计
    count_corner = 1  # 角统计
    while 1:
        floor += 1
        count_corner += 4  # 每层加4个角
        for i in range(4):  # 循环计算角的值
            corner = (floor*2+1)**2 - i*floor*2
            if is_prime2(corner):  # 如果是素数就记录
                count_prime += 1
        if count_prime / count_corner < 0.1:
            return floor*2+1

