#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
方阵中的最大乘积
在如下的20×20方阵中，有四个呈对角线排列的数被标红了。

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
这四个数的乘积是26 × 63 × 78 × 14 = 1788696。

在这个20×20方阵中，四个在同一方向（从下至上、从上至下、从右至左、从左至右或者对角线）上相邻的数的乘积最大是多少？

把这个坐标化，用嵌套list，用索引.索引来确定坐标点，四个方向，侧移一位来确定4个数
所以必须要用四个方式去获取所有的组合，或者用numpy来解决阵列的索引问题
"""

ask = """08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# 先解决文本处理

raid, di, maxNum, contrast = [], {}, 0, 0
text_list = ask.split("\n")  # 通过split分割成列表

count_row = len(text_list)  # 统计有多少列，因为是方阵，所以长宽一样

for number_text in text_list:  # 遍历各个数字变成int类型
    raid.append([int(num) for num in number_text.split(" ")])

"""
    以下为以遍历的方式从四个方向获取数字组合
"""
container = []
def add_to_container(got_list):  # 装载函数
    global container
    if 0 not in got_list:  # 没有0的列表，装进容器
        container.append(got_list)

# 从左到右获取
for i in range(count_row):  # 横排编号
    for j in range(count_row - 3):  # 必须以4个为组合，在range里面是左闭右开，所以是-3
        got = raid[i][j:j+4]
        add_to_container(got)

# 从上到下获取
for i in range(count_row - 3):
    for j in range(count_row):
        got = [raid[i][j], raid[i+1][j], raid[i+2][j], raid[i+3][j]]
        add_to_container(got)

# 从左上到右下
for i in range(count_row - 3):
    for j in range(count_row - 3):
        got = [raid[i][j], raid[i+1][j+1], raid[i+2][j+2], raid[i+3][j+3]]
        add_to_container(got)

# 从右上到左下
for i in range(count_row - 3):  # 还是以排号为主
    for j in range(count_row-1, 2, -1):
        got = [raid[i][j], raid[i+1][j-1], raid[i+2][j-2], raid[i+3][j-3]]
        add_to_container(got)

# 对容器内的组合进行遍历对比
from functools import reduce
from operator import mul  # 相当于一个lambda x, y: x*y

result = 0
group_list = []
for group in container:
    got = reduce(mul, group)
    if result < got:
        result = got
        group_list = group

print(result, group_list)