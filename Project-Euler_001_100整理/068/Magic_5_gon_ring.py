#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
魔力五边形环
考虑下面这个“魔力”三角形环，在其中填入1至6这6个数，每条线上的三个数加起来都是9。
从最外侧结点所填的数最小的线（在这个例子中是4,3,2）开始，按顺时针方向，每个解都能被唯一表述。例如，上面这个解可以记作解集：4,3,2; 6,2,1; 5,1,3。
将环填满后，每条线上的总和一共有四种可能：9、10、11和12。总共有8种填法：
总和	解集
9	4,2,3; 5,3,1; 6,1,2
9	4,3,2; 6,2,1; 5,1,3
10	2,3,5; 4,5,1; 6,1,3
10	2,5,3; 6,3,1; 4,1,5
11	1,4,6; 3,6,2; 5,2,4
11	1,6,4; 5,4,2; 3,2,6
12	1,5,6; 2,6,4; 3,4,5
12	1,6,5; 3,5,4; 2,4,6
把解集中的数字连接起来，可以构造一个9位数字串；对于三角形环来说，最大的数字串是432621513。
在如下的“魔力”五边形环中，在其中填入1至10这10个数，根据不同的填写方式，可以组成16位或17位数字串。在“魔力”五边形环中，最大的16位数字串是多少？
"""


def xxx():
    from itertools import permutations
    num = 0
    for i in permutations(range(1, 11)):
        if i[0] == 6 and not {10, 9, 8, 7, 6} & set(i[5:]):
            x = list(i)
            if sum(x[:1] + x[5:7]) == sum(x[1:2] + x[6:8]) == sum(x[2:3] + x[7:9]) == sum(x[3:4] + x[8:]) == sum(
                    x[4:5] + x[9:] + x[5:6]):
                y = x[:1] + x[5:7] + x[1:2] + x[6:8] + x[2:3] + x[7:9] + x[3:4] + x[8:] + x[4:5] + x[9:] + x[5:6]
                num = max(num, int("".join([str(k) for k in y])))
    return num
