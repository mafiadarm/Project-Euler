# -- coding = utf-8 -- version 3.6
#Project Euler No.1
#第一次体会到算法的差别有多大
'''
3的倍数和5的倍数
如果我们列出10以内所有3或5的倍数，我们将得到3、5、6和9，这些数的和是23。

求1000以内所有3或5的倍数的和。

看成是一个三角形排列

            3
           3 3
          3 3 3
         3 3 3 3
这样就成了求梯形面积（三角形+顶） 数值范围整除3是多少，就是多少层（高、底）计算出多少个3，然后在乘以3
def suma(xrange,num): #效率较低的方法
    return sum(list(filter(lambda x:x%num == 0,range(1,xrange))))

def sumb(xrange=0,num=0): #省略大部分遍历时间
    return (num+num*(xrange//num))*(xrange//num)/2
'''
def No_1_Sums(xrange=1000,x=3,y=5): #减去被覆盖那部分
    return (x+x*(xrange//x))*(xrange//x)/2 + (y+y*(xrange//y))*(xrange//y)/2 - (x*y+x*y*(xrange//(x*y)))*(xrange//(x*y))/2

#Project Euler No.2
'''
偶斐波那契数
斐波那契数列中的每一项都是前两项的和。由1和2开始生成的斐波那契数列前10项为：

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …
考虑该斐波那契数列中不超过四百万的项，求其中为偶数的项之和。

[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987
求偶数项之和，我们看到第二个+第四个=第五个-1（2+5=8-1）、（2+5+13=21-1）由此推断小于400W的和实际等于400w这个数前或后最近那个数的奇数-1
'''
def No_2_Fibla(xrange=4000000,x=1,y=2):
    li = [1,2]
    while y < xrange:
        x,y = y,x+y
        li.append(y)
    return [li[-1]-1 if li.index(li[-1])%2 == 0 else li[-2]-1][0]

#Project Euler No.3
'''
最大质因数
13195的所有质因数为5、7、13和29。

600851475143最大的质因数是多少？

假如一个数N是合数,它有一个约数a,a×b=N
则a、b两个数中必有一个大于或等于根号N,一个小于或等于根号N.
因此,只要小于或等于根号N的数（1除外）不能整除N,则N一定是素数.
如果值是：19874589103 这种大型质数，要从1开始遍历，就会很慢,用以下函数秒出结果
def pro(n=600851475143):
    f = 2
    while f*f <= n:
        while not n%f:
            n //= f
        f += 1
    print(n)
但是平方数或者平方数相乘就无法算
'''
'''
def No_3_IsPrime(num=600851475143):
    li = []
    for i in range(2,num):
        if num%i == 0: #把所有能除尽的数加入列表
            if i < num**0.5:
                li.append(i)
                li.append(int(num/i))
            elif i == num**0.5:
                print("这是%s平方"%int(num**0.5))
                li.append(i)
                return isPrime1(li)
            else:
                return isPrime1(li)
    print("这是一个质数")

def isPrime1(n):
    ls = []
    for j in n:
        if isPrime2(j):
           ls.append(j)#把是质数的因子加入列表
    return print("它的最大质因数为%s"%max(ls))
'''
def isPrime2(n): #短除法，验证列表内的数字是否是质数
    for i in range(2, int(n**0.5)+1):  
        if n % i == 0:  
            return False  
    return True

def isPrime3(n): #列出所有质因子，如果传1进去，列表会是空值
    li,f = [],2
    while f*f <= n:
        while not n%f:
            li.append(f)
            n //= f
        f += 1
    if n != 1:
        li.append(n)
    return li
    
 
def No_3_IsPrime(n=600851475143):
    f = 2
    while f*f <= n:
        while not n%f:
            n //= f
        f += 1
    if n == 1:
        return f-1
    else:
        return n


#Project Euler No.4
'''
最大回文乘积
回文数就是从前往后和从后往前读都一样的数。由两个2位数相乘得到的最大回文乘积是 9009 = 91 × 99。

找出由两个3位数相乘得到的最大回文乘积

两个最大三位数相乘=999*999，所以先找出998001以内所有的回文数
最小的两个三位数相乘=100*100，所以回文数要大于10000
从大的开始检查是否有三位数的因子，从999开始，如果被整除则为最大


def palindromic_M():
    ss = []
    li = []
    for j in range(1,10):
        for i in range(0,10):
            ss.append(int(str(j)+str(i)+str(i)+str(i)+str(i)+str(j)))
            ss.append(int(str(j)+str(j)+str(i)+str(i)+str(j)+str(j)))
            ss.append(int(str(j)+str(j)+str(j)+str(j)+str(j)+str(j)))
    [li.append(x) for x in ss if x not in li]
    li.sort()
    for i in li[::-1]:
        for j in range(100,1000):
            if i%j == 0 and i/j < 1000:
                print("最大数为：%sX%s=%s"%(j,int(i/j),i))
                return
发现没有尽所有回文数，看到有这么种方式可以
def is_palindrome(n):   
    return str(n)==str(n)[::-1]
 
for i in filter(is_palindrome,range(1000000)):
    print(i)
'''
def No_4_Palindromic():
    ss = [i for i in range(998002) if str(i)==str(i)[::-1] and i > 10000]
    for i in ss[::-1]:
        for j in range(100,1000):
            if i%j == 0 and i/j < 1000:
                print("最大数为：%sX%s=%s"%(j,int(i/j),i))
                return 


#Project Euler No.5
'''
最小倍数
2520是最小的能够被1到10整除的数。

最小的能够被1到20整除的正数是多少？

就是求最小公倍数

def gg():
    li = [2]
    for i in [i for i in range(2,21)]:
        print("现在i是：%s"%i)
        if li[-1] < i:
            ss = i
            ll = li[-1]
            ls = ss
            gb(li,ls,ll,ss)
        else:
            ss = li[-1]
            ll = i
            ls = ss
            gb(li,ls,ll,ss)
    return li[-1]

def gb(li,ls,ll,ss):
    while True:
        if ls%ll == 0 and ls%ss == 0:
            print("ll：%s和ss:%s的最小公倍数：%s"%(ll,ss,ls))
            return li.append(ls)    
        else:
            ls += 1

最大公约数：
def gys(x,y):
    while y:
        x,y = y,x%y
    return x
    
欧几里德算法：   
最大公约数是最小公倍数的约数，且最小公倍数与最大公约数的商等于两个数分别与最大公约数的商的积。
即：若X、Y的最大公约数是A、最小公倍数是B，则有B/A=（X/A）（Y/A）。
'''
def No_5_Common_Multiple(ran=21):
    li = [1]
    for i in [i for i in range(2,ran)]:
        common_Divisor(li[-1],i,i,li)
    return print(int(li[-1]))

def common_Divisor(x,y,z,li):
    while y:
        x,y = y,x%y
    return li.append(z/x*li[-1]/x*x)      


#Project Euler No.6
'''
平方的和与和的平方之差
前十个自然数的平方的和是
1² + 2² + … + 10² = 385
前十个自然数的和的平方是
(1 + 2 + … + 10)² = 552 = 3025
因此前十个自然数的平方的和与和的平方之差是 3025 − 385 = 2640。

求前一百个自然数的平方的和与和的平方之差。
'''
def No_6_Square_Foot_Square(s=100):
    print(sum(list(range(s+1)))**2 - sum([i**2 for i in range(s+1)]))

#Project Euler No.7
'''
第10001个素数
列出前6个素数，它们分别是2、3、5、7、11和13。我们可以看出，第6个素数是13。

第10,001个素数是多少？
'''
def No_7_Prime_X(num=10001):
    a,b,li = 0,2,[1]
    while li.index(li[-1]) != num:       
        if isPrime2(b):
            li.append(b)
            b += 1
        else:
            b += 1
    print(li[-1])

#Project Euler No.8
'''连续数字最大乘积
在下面这个1000位正整数中，连续4个数字的最大乘积是 9 × 9 × 8 × 9 = 5832。

找出这个1000位正整数中乘积最大的连续13个数字。它们的乘积是多少？'''

def No_8_Continued_Product(text='''
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''): 
    from functools import reduce
    ss = (text.replace("\n","")).replace(" ","")
    lis = []
    for i in range(len(str(ss))-12):
        lis.append(reduce(lambda a,b:a*b,[int(str(ss)[j]) for j in range(i,i+13)]))
    return max(lis)

#Project Euler No.9
'''
特殊毕达哥拉斯三元组
毕达哥拉斯三元组是三个自然数a < b < c组成的集合，并满足

a² + b² = c²
例如，3² + 4² = 9 + 16 = 25 = 5²。

有且只有一个毕达哥拉斯三元组满足 a + b + c = 1000。求这个三元组的乘积abc。

枚举就行了
'''
def No_9_Pythagorean_Triples(ss=1000):
    for a in range(1,ss):
        for b in range(a+1,ss):
            c = ss-a-b
            if a*a + b*b == c*c:
                return a,b,c,a*b*c

#Project Euler No.10
'''
素数的和
所有小于10的素数的和是2 + 3 + 5 + 7 = 17。

求所有小于两百万的素数的和
'''
def No_10_Sum_Prime(n=2000000):
    su = 0
    for i in range(n):
        if isPrime2(i):
            su += i
    return su

#Project Euler No.11
'''
方阵中的最大乘积
在如下的20×20方阵中，有四个呈对角线排列的数被标红了。

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
这四个数的乘积是26 × 63 × 78 × 14 = 1788696。

在这个20×20方阵中，四个在同一方向（从下至上、从上至下、从右至左、从左至右或者对角线）上相邻的数的乘积最大是多少？

把这个坐标化，用嵌套list，用索引.索引来确定坐标点，四个方向，侧移一位来确定4个数
'''
'''
ss = \'''08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\'''
li,di = [],{}
ls = ss.replace(" ",",").split("\n")
for i in range(len(ls[0].split(","))):
    li.append([int(j) for j in ls[i].split(",")])

con_One = len(li[0])
maxNum = 0

def maxnum():
    array_Across()
    array_Vertical()
    array_RightOblique()
    array_LeftOblique()
    print(di.get(maxNum),maxNum)

def array_Across():
    contrast = 0
    global maxNum
    for i in range(con_One):
        for j in range(con_One-3):
            if li[i][j] and li[i][j+1] and li[i][j+2] and li[i][j+3]:
                contrast = li[i][j]*li[i][j+1]*li[i][j+2]*li[i][j+3]
                if contrast > maxNum:
                    di[li[i][j]*li[i][j+1]*li[i][j+2]*li[i][j+3]]="{},{},{},{}".format(li[i][j],li[i][j+1],li[i][j+2],li[i][j+3])
                    maxNum = contrast
    return maxNum

def array_Vertical():
    contrast = 0
    global maxNum
    for i in range(con_One-3):
        for j in range(con_One):
            contrast = li[i][j]*li[i+1][j]*li[i+2][j]*li[i+3][j]
            if contrast > maxNum:
                di[li[i][j]*li[i+1][j]*li[i+2][j]*li[i+3][j]]="{},{},{},{}".format(li[i][j],li[i+1][j],li[i+2][j],li[i+3][j])
                maxNum = contrast
    return maxNum


def array_LeftOblique():
    contrast = 0
    global maxNum
    for i in range(con_One-3):
        for j in range(con_One-3):
            contrast = li[i][j]*li[i+1][j+1]*li[i+2][j+2]*li[i+3][j+3]
            if contrast > maxNum:
                di[li[i][j]*li[i+1][j+1]*li[i+2][j+2]*li[i+3][j+3]]="{},{},{},{}".format(li[i][j],li[i+1][j+1],li[i+2][j+2],li[i+3][j+3])
                maxNum = contrast
    return maxNum

def array_RightOblique():
    contrast = 0
    global maxNum
    for i in range(con_One-3):
        for j in range(con_One-1,2,-1):
            contrast = li[i][j]*li[i+1][j-1]*li[i+2][j-2]*li[i+3][j-3]
            di[li[i][j]*li[i+1][j-1]*li[i+2][j-2]*li[i+3][j-3]]="{},{},{},{}".format(li[i][j],li[i+1][j-1],li[i+2][j-2],li[i+3][j-3])
            if contrast > maxNum:
                maxNum = contrast
    return maxNum
'''
def No_11_Maxnum(ss = '''08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''):

    li,di,maxNum,contrast = [],{},0,0
    ls = ss.replace(" ",",").split("\n")

    for i in range(len(ls[0].split(","))):
        li.append([int(j) for j in ls[i].split(",")])

    con_One = len(li[0])

    for i in range(con_One):
        for j in range(con_One-3):
            if li[i][j] and li[i][j+1] and li[i][j+2] and li[i][j+3]:
                contrast = li[i][j]*li[i][j+1]*li[i][j+2]*li[i][j+3]
                if contrast > maxNum:
                    di[li[i][j]*li[i][j+1]*li[i][j+2]*li[i][j+3]]="{},{},{},{}".format(li[i][j],li[i][j+1],li[i][j+2],li[i][j+3])
                    maxNum = contrast
    


    for i in range(con_One-3):
        for j in range(con_One):
            contrast = li[i][j]*li[i+1][j]*li[i+2][j]*li[i+3][j]
            if contrast > maxNum:
                di[li[i][j]*li[i+1][j]*li[i+2][j]*li[i+3][j]]="{},{},{},{}".format(li[i][j],li[i+1][j],li[i+2][j],li[i+3][j])
                maxNum = contrast



    for i in range(con_One-3):
        for j in range(con_One-3):
            contrast = li[i][j]*li[i+1][j+1]*li[i+2][j+2]*li[i+3][j+3]
            if contrast > maxNum:
                di[li[i][j]*li[i+1][j+1]*li[i+2][j+2]*li[i+3][j+3]]="{},{},{},{}".format(li[i][j],li[i+1][j+1],li[i+2][j+2],li[i+3][j+3])
                maxNum = contrast



    for i in range(con_One-3):
        for j in range(con_One-1,2,-1):
            contrast = li[i][j]*li[i+1][j-1]*li[i+2][j-2]*li[i+3][j-3]
            di[li[i][j]*li[i+1][j-1]*li[i+2][j-2]*li[i+3][j-3]]="{},{},{},{}".format(li[i][j],li[i+1][j-1],li[i+2][j-2],li[i+3][j-3])
            if contrast > maxNum:
                maxNum = contrast
                
    return di.get(maxNum),maxNum

#Project Euler No.12
'''
高度可约的三角形数
三角形数数列是通过逐个加上自然数来生成的。例如，第7个三角形数是 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28。三角形数数列的前十项分别是：

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …
让我们列举出前七个三角形数的所有约数：

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
我们可以看出，28是第一个拥有超过5个约数的三角形数。

第一个拥有超过500个约数的三角形数是多少？
'''
'''
def ss():
    from functools import reduce
    ini,con_N = 1,0
    while con_N < 5:
        tri_N = reduce(lambda a,b:a+b,list(range(1,ini+1)))
        con_N = len([i for i in range(1,tri_N+1) if tri_N%i==0 ])
        ini += 1
    print("当a={}时，三角形数为{}，约数有{}个".format(ini,tri_N,con_N))
#还是想用遍历列表配对
def ss():
    li = sorted([i for i in range(1,10)]+[i for i in range(1,10)])
    ls = sorted([1]+[i for i in range(3,10) if i%2 == 1]+[i for i in range(3,10) if i%2 == 1])
    for s in range(len(ls)):
        ll = li[s]*ls[s]
        kk = len([i for i in range(1,ll+1) if ll%i==0 ])
        print(kk)

def ss():
    a,b,ss = 1,3,0
    while ss < num:
        if len([i for i in range(1,a*b+1) if (a*b)%i==0]) < num:
            a += 1
            if len([i for i in range(1,a*b+1) if (a*b)%i==0]) < num:
                b += 2
            else:
                break
        else:
            break
    print(a,b,a*b)
把这个数先用2、3、5、7、11、13、......等质数的连乘积表示，比如
24=2*2*2*3=2³*3
再用各个质数的指数加一后再相乘即为此数的约数个数，
比如 (3+1)*(1+1)=4*2=8， 即表示24有8个约数。
#遍历还是太慢，在验证区还是要用其他办法

itertools.count(1)无限迭代1,2,3,4,5,...叠加成三角形数
'''
def No_12_Triangular_Number(num=500):
    from collections import Counter
    from functools import reduce #reduce不能计算为空的迭代
    from itertools import count
    a = 1
    for i in count(2):
        a += i
        if reduce(lambda x,y:x*y, [Counter(isPrime3(a)).get(j)+1 for j in Counter(isPrime3(a))]) > num:
            return a
             
#Project Euler No.13
'''
大和
计算出以下一百个50位数的和的前十位数字。
'''

def No_13_Large_Sum():
    from functools import reduce
    largeNum = '''37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690'''
    return int(str(reduce(lambda a,b:a+b,[int(i) for i in largeNum.split("\n")]))[0:10:])

#Project Euler No.14
'''
最长考拉兹序列
在正整数集上定义如下的迭代序列：

n → n/2 （若n为偶数）
n → 3n + 1 （若n为奇数）

从13开始应用上述规则，我们可以生成如下的序列：

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
可以看出这个序列（从13开始到1结束）共有10项。尽管还没有被证明，但我们普遍认为，从任何数开始最终都能迭代至1（“考拉兹猜想”）。

从小于一百万的哪个数开始，能够生成最长的序列呢？

注： 序列开始生成后允许其中的项超过一百万。
'''
def No_14_Longest_Collatz_sequence(num=1000000):
    ss,ls = 0,[]
    for n in range(1,num):
        li = [n]
        while n != 1:
            if n%2 == 0:
                n /= 2
                li.append(n)
            else:
                n = n*3+1
                li.append(n)
        if len(li) > ss:
            ss,ls = len(li),li
    return ls[0]

#Project Euler No.15
'''
网格路径
从一个2×2方阵的左上角出发，只允许向右或向下移动，则恰好有6条通往右下角的路径。

对于20×20方阵来说，这样的路径有多少条？
'''
'''
如果是阵列，从到点的步数规律如下：
0   1   1   1    1
1   2   3   4    5
1   3   6   10   15
1   4   10  20   35
1   5   15  35   70
用numpy可以计算(1-17)，但是到18的时候，结果是负数，在矩阵里面也是唯一负数
def ss(num=2):
    import numpy as np
    arr = np.zeros((num,num),dtype=np.long)
    for i in range(num):
        for j in range(num):
            arr[i][0]=1
            arr[0][j]=1
            arr[0][0]=0

    for i in range(1,num):
        for j in range(1,num):
            arr[i][j]=arr[i-1][j]+arr[i][j-1]
    print (arr[num-1,num-1], arr)
'''
'''
def No_15_arr(num=20):
    from functools import reduce
    sum1,sum2 = 1,1
    return int(reduce(lambda a,b:a*b, [i for i in range(num*2,num,-1)]) / reduce(lambda a,b:a*b, [i for i in range(num,0,-1)]))
'''
'''
用排列组合即可解决：C(n,m) = n!/(m!(n-m)!)
20*20的方格中，从左上角到右下角，不论怎么走，都是20步向左和20步向右，
即：在40步中，20个“向右”和20个“向下”共有几种排法？
C(40,20)=40!/20!/（40-20）!
'''
def No_15_arr(num=20):
    import math
    return int(math.factorial(num*2)/math.factorial(num)/math.factorial(num))

#Project Euler No.16
'''
幂的数字和
2**15 = 32768，而32768的各位数字之和是 3 + 2 + 7 + 6 + 8 = 26。

2**1000的各位数字之和是多少？
'''
def No_16_Power_Digit_sum(n=2,m=1000):
    return sum([int(i) for i in str(n**m)])

#Project Euler No.17
'''
表达数字的英文字母计数
如果把1到5写成英文单词，分别是：one, two, three, four, five，这些单词一共用了3 + 3 + 5 + 4 + 4 = 19个字母。

如果把1到1000都写成英文单词，一共要用多少个字母？

注意： 不要算上空格和连字符。例如，342（three hundred and forty-two）包含23个字母，而115（one hundred and fifteen）包含20个字母。单词“and”的使用方式遵循英式英语的规则。
'''
#1位数
'''
di1.get(1-11)
'''
#10位数
'''
di3.get(1-9)+di1.get(1-10)
di2.get(1-10)
'''
#100位数
'''
di1.get(1-10)+"hundred and"+di1.get(1-10)
di1.get(1-10)+"hundred and"+di2.get(1-9)
di1.get(1-10)+"hundred and"+di2.get(1-9)+di1.get(1-10)
'''
'''
用字典做
def ss():
    str1 = "one two three four five six seven eight nine"
    str2 = "eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"
    str3 = "twenty thirty fourty fifty sixty seventy eighty ninety"
    di1 = {i:j for i,j in enumerate(str1.split(" "),1)}
    di2 = {i:j for i,j in enumerate(str2.split(" "),1)}
    di3 = {i:j for i,j in enumerate(str3.split(" "),1)}
    l0 = ["ten","hundred"]
    l1 = [di1.get(i+1) for i in range(len(di1))]
    l2 = [di3.get(i+1)+di1.get(j+1) for i in range(len(di3)) for j in range(len(di1))]
    l3 = [di2.get(i+1) for i in range(len(di2))]
    l4 = [di1.get(i+1)+"hundredand"+di1.get(j+1) for i in range(len(di1)) for j in range(len(di1))]
    l5 = [di1.get(i+1)+"hundredand"+di2.get(j+1) for i in range(len(di1)) for j in range(len(di2))]
    l6 = [di1.get(i+1)+"hundredand"+di3.get(j+1)+di1.get(k+1) for i in range(len(di1)) for j in range(len(di3)) for k in range(len(di1))]
    return len("".join(l0 + l1 + l2 + l3 + l4 + l5 + l6))
'''
def No_17_Number_Letter_counts():
    str1 = "one two three four five six seven eight nine"
    str2 = "eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"
    str3 = "twenty thirty fourty fifty sixty seventy eighty ninety"
    di1 = [i for i in str1.split(" ")]
    di2 = [i for i in str2.split(" ")]
    di3 = [i for i in str3.split(" ")]
    l1 = ["ten","onethousand"]
    l2 = [i+j for i in di3 for j in di1]
    l3 = [i+"hundredand" for i in di1]
    l4 = [i+"hundredand"+j for i in di1 for j in di1]
    l5 = [i+"hundredand"+j for i in di1 for j in di2]
    l6 = [i+"hundredand"+j+k for i in di1 for j in di3 for k in di1]
    return len("".join(di1+di2+di3+l1+l2+l3+l4+l5+l6))

#Project Euler No.18
'''
最大路径和 I
从下面展示的三角形的顶端出发，不断移动到在下一行与其相邻的元素，能够得到的最大路径和是23。

       3
      7 4
     2 4 6
    8 5 9 3

如上图，最大路径和为 3 + 7 + 4 + 9 = 23。

求从下面展示的三角形顶端出发到达底部，所能够得到的最大路径和：

 ↓---↓
 
注意： 在这个问题中，由于只有16384条路径，通过尝试所有的路径来解决问题是可行的。但是，对于第67题，虽然是一道相同类型的题目，但是三角形将拥有一百行，此时暴力破解将不能解决，而需要一个更加聪明的办法！;o)

用倒数第二行，每个数都能往下分别加2个近邻的数，留下最大的，成为新的倒数第二行（重复动作）；从最下面一层往上面算，最后加出来的数就是最大路径和
'''


def No_18_Maximum_Path():
    li = '''75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''
    Tri = [li.split("\n")[i].split(" ") for i in range(len(li.split("\n")))]
    for i in range(1,15):
        Tri[-i-1] = [max(int(Tri[-i-1][j])+int(Tri[-i][j]),int(Tri[-i-1][j])+int(Tri[-i][j+1])) for j in range(len(Tri[-i-1]))]
    return Tri[0][0]

#Project Euler No.19
'''
数星期日
下列信息是已知的，当然你也不妨自己再验证一下。

1900年1月1日是星期一。
三十天在九月中，
四六十一也相同。
剩下都是三十一，
除去二月不统一。
二十八天平常年，
多加一天在闰年。
闰年指的是能够被4整除却不能被100整除的年份，或者能够被400整除的年份。
在二十世纪（1901年1月1日到2000年12月31日）中，有多少个月的1号是星期天？
'''

#Project Euler No.20
'''
阶乘数字和
n! 的意思是 n × (n − 1) × … × 3 × 2 × 1

例如，10! = 10 × 9 × … × 3 × 2 × 1 = 3628800，所以10!的各位数字和是 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27。

求出100!的各位数字和。
'''
def No_20_Factorial_Digit_sum(num=100):
    import math
    from functools import reduce
    return reduce(lambda a,b:a+b,[int(i) for i in str(math.factorial(100))])

#Project Euler No.21
'''亲和数
记d(n)为n的所有真因数（小于n且整除n的正整数）之和。
如果d(a) = b且d(b) = a，且a ≠ b，那么a和b构成一个亲和数对，a和b被称为亲和数。

例如，220的真因数包括1、2、4、5、10、11、20、22、44、55和100，因此d(220) = 284；而284的真因数包括1、2、4、71和142，因此d(284) = 220。

求所有小于10000的亲和数的和。'''
def No_21_Amicable_Numbers(num=10000):
    from functools import reduce
    li = []
    for num in range(1,num+1):
        x,y = 0,0
        for i in range(1,num):
            if num%i==0:
                x += i

        for j in range(1,x):
            if x%j == 0:
                y += j
                
        if y == num and y != x:
            li.append(num)
            li.append(x)

    return reduce(lambda a,b:a+b,li)/2

#Project Euler No.22
'''
姓名得分
在这个46K的文本文件names.txt（右击并选择“目标另存为……”）中包含了五千多个姓名。首先将它们按照字母序排列，然后计算出每个姓名的字母值，乘以它在按字母顺序排列后的位置，以计算出姓名得分。

例如，按照字母序排列后，位于第938位的姓名COLIN的字母值是3 + 15 + 12 + 9 + 14 = 53。因此，COLIN的姓名得分是938 × 53 = 49714。

文件中所有姓名的姓名得分之和是多少？ 324536 s = open(names.txt,r+) ss = s.read()
'''
def No_22_Names_Score():
    from functools import reduce
    ss = "MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY"
    sorted(ss)
    char = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    di = dict(zip([i for i in char],list(range(1,27))))
    return reduce(lambda a,b:a+b,[di.get(j)  for i in ss for j in i])
